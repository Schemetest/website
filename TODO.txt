Set up proper licencing.

----------------

Maybe, and or maybe by someone else:

From https://srfi-email.schemers.org/srfi-discuss/msg/15036461/

https://github.com/srfi-explorations/srfi-test is a repo I started a
while back to collect tests for as many SRFIs as we can in one place.
The tests in that repo use the SRFI 64 test definition primitives. Shiro
and Alex graciously donates many of their excellent tests under the MIT
License so the licensing situation for the repo can be as simple as the
situation with the SRFI documents themselves. Marc Feeley also donated
any tests in Gambit and is converting them piecemeal to SRFI 64.

The ultimate idea would be that the repo can have the test suites in a
format that Scheme implementations can simply copy those files verbatim
into their source trees. Doing whatever it takes to get them into a form
that implementors find agreeable. (include "...") in (define-library)
does wonders to enable portable .scm files. I haven't yet had the energy
to pursue this since there are so many things to do, but it'd be awesome
if you do. Aggregating the tests already uncovered a bunch of bugs; I
expect doing it more would uncover more and save everyone time in the
long run.

----------------

From https://srfi-email.schemers.org/srfi-discuss/msg/15036461/

We have Docker containers for 45 Scheme implementations at
<https://hub.docker.com/u/schemers>, including a container build from
git master for many of the actively developed Schemes. I can give ssh
access to people I know from the lists to a Linux server with Docker
pre-configured.

----------------

From https://srfi-email.schemers.org/srfi-discuss/msg/15036461/

Lassi:

The situation basically is that 3 test definition frameworks dominate:

  SRFI 64

  Chicken's `test` egg <https://wiki.call-cc.org/eggref/5/test>

  The (chibi test) library
  <http://snow-fort.org/s/gmail.com/alexshinn/chibi/test/0.9.0/index.html>,
  a port of Chicken `test`.

From https://srfi-email.schemers.org/srfi-discuss/msg/15036542/

Marc:

  There is also SRFI 78, which, I think, Wolfgang mainly uses.

Lassi in immediate followup:

  Yes, 78 exists but 64 is far more widely used. 78 is much simpler.

Marc in later followup:

  And not a full-featured test system, I'd say.

----------------

From https://srfi-email.schemers.org/srfi-discuss/msg/15036542/

Marc:

PS Guile and autoconf now have great support for SRFI 64. The test
results are reported through a TAP interface.

I have also written a SRFI 64 implementation (based on Per's), which
directly outputs its results in TAP, which can be grokked by other
build tools. So we have at least three SRFI 64 implementations, which
is a good thing.

[ https://en.wikipedia.org/wiki/Test_Anything_Protocol
  http://testanything.org/ ]

----

From https://srfi-email.schemers.org/srfi-discuss/msg/15036713/

Marc:

I think the test runner interface of SRFI 64 is very general and
highly customizable, so I find it hard to believe that it cannot be
used to drive an implementation-specific test backend.

The adaption to TAP is just one example of what is possible.

--

From https://srfi-email.schemers.org/srfi-discuss/msg/15036713/

Marc:

The nice thing about the completeness of the interface of SRFI 64 is
that it is even capable of meta-testing itself.

While this may not be an everyday reason, there is a strong reason why
leaving out the second half of SRFI 64 is too limiting.

For example, at some stage you want to run tests against the clock
(inside the SRFI) or need to collect other meta information (e.g.
about the memory consumption or some other state) of the test runs to
make sure everything works as you want. For that (i.e. in every
situation where single tests are not completely independent), you want
to customize the test runner (which, ultimately, will defer to the
implementation-provided default test runner).

--

From https://srfi-email.schemers.org/srfi-discuss/msg/15037412/

Per:

[...] Most of the code of the SRFI 64 implementation is a fairly
simple (though attempting to be "full-featured") test definition
framework.  Adding the hooks and API of the test runner framework
mostly adds some extra indirection (a simple ad hoc
implementation-and-interface system) so you can run the same
test-suites on alternative frameworks.  (Primarily customizing how
tests results are displayed and/or summarized.)

-

From https://srfi-email.schemers.org/srfi-discuss/msg/15037509/

Per:

On 8/20/20 12:17 PM, Lassi Kortela wrote:
> Whatever the reasons, a full-featured test definition framework is
> much simpler than a full-featured test runner.

It probably makes sense to split srfi-64 into multiple libraries, with
the stuff for writing test-runners in a separate library.

Also, in a Scheme that has some kind of class/interface inheritance
(or Haskell-style classes) it would no doubt be cleaner to define
test-runner as an abstract class/interface, along with a default
implementation.  Instead of using procedures to replace the various
hooks, you'd use inheritance to override them.

(Similar to custom ports.)

--

From https://srfi-email.schemers.org/srfi-discuss/msg/15038577/

Alex:

The Chibi/Chicken test libraries were based on SRFI 64.

My complaints with SRFI 64 are not so much that it is large,
but that it comes off as very OO and Java influenced, with
state being stored in a runner object, and runners being
generated by a "factory".

(chibi test) takes a more functional approach, allowing
customization through parameters.  State is maintained
within the test groups (which may be nested):

  http://snow-fort.org/s/gmail.com/alexshinn/chibi/test/0.9.0/index.html

The `test` procedure is actually a combination of `test-equal`
and `test-approximate`, with a smarter definition of approximate,
and an epsilon defaulting to a parameter.  I like the shorter
name because you write it a lot in test suites.

The other major difference is the logic for skipping tests or
groups can be set from environment variables, which I'm not
committed to but is very handy when you want to run just one
or a few tests in a large suite repeatedly during development.

If I were to make any more changes to (chibi test) it would be
to provide an API for custom test-foo syntax with friendly
error reporting as to what was expected and what went wrong.
However, I recently added support for automatic diff highlighting
of the "expected" vs "actual" results, which covers most cases.

If we had a more functional testing SRFI (and SRFI 78 is too
minimal), I'd probably include it directly in Chibi.

--

From https://srfi-email.schemers.org/srfi-discuss/msg/15039169/

Marc:

I agree that SRFI 64's style is not the first style you would come up
with as a Scheme programmer.

However, in this case it is good that the customization of the test
runners does not have to go through local binding constructs but can
be done globally. This way, I can just import a library at the top of
my tests, which does the main customization for me.

--

From https://srfi-email.schemers.org/srfi-discuss/msg/15039313/

Alex, replying to the immediate above post:

The same is true of the more functional (chibi test).

----------------

